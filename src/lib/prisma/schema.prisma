generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tool {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String   @db.Text
  link        String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model authToken {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  token       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Password {
  id        Int      @id @default(autoincrement())
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      Password?
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Company {
  id                  String   @id @default(cuid())
  name                String   @unique
  description         String
  users               User[]
  WILDAUTHNEWV3       String
  WBTOKEN             String
  BasketUID           String
  XSupplierId         String
  XSupplierIdExternal String
  WB_TOKEN            String
  seeded              Boolean  @default(value: false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
